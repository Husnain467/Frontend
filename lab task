{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Husnain467/Frontend/blob/main/lab%20task\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qOhcA988CraR",
        "outputId": "84c08813-73ad-46aa-cbfe-24ba4ffa97e6"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "BFS traversal of the tree: [1, 2, 3, 4, 5, 6, 7]\n"
          ]
        }
      ],
      "source": [
        "class TreeNode:\n",
        "    def __init__(self, value):\n",
        "        self.value = value\n",
        "        self.left = None\n",
        "        self.right = None\n",
        "\n",
        "def bfs_tree(root):\n",
        "    if not root:\n",
        "        return []\n",
        "\n",
        "    queue = [root]\n",
        "    result = []\n",
        "\n",
        "    while queue:\n",
        "        node = queue.pop(0)\n",
        "        result.append(node.value)\n",
        "        if node.left:\n",
        "            queue.append(node.left)\n",
        "        if node.right:\n",
        "            queue.append(node.right)\n",
        "\n",
        "    return result\n",
        "\n",
        "# Creating a sample tree\n",
        "root = TreeNode(1)\n",
        "root.left = TreeNode(2)\n",
        "root.right = TreeNode(3)\n",
        "root.left.left = TreeNode(4)\n",
        "root.left.right = TreeNode(5)\n",
        "root.right.left = TreeNode(6)\n",
        "root.right.right = TreeNode(7)\n",
        "\n",
        "# Performing BFS on the tree\n",
        "print(\"BFS traversal of the tree:\", bfs_tree(root))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BF_IuQ7OHZpm",
        "outputId": "66a23ddc-a90d-4b0f-e660-4451d39f0955"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "DFS traversal of the graph: ['A', 'C', 'F', 'E', 'B', 'D']\n"
          ]
        }
      ],
      "source": [
        "def dfs_graph(graph, start):\n",
        "    visited = set()\n",
        "    stack = [start]\n",
        "    result = []\n",
        "\n",
        "    while stack:\n",
        "        node = stack.pop()\n",
        "        if node not in visited:\n",
        "            visited.add(node)\n",
        "            result.append(node)\n",
        "            stack.extend(graph[node])\n",
        "\n",
        "    return result\n",
        "\n",
        "# Creating a sample graph using adjacency list\n",
        "graph = {\n",
        "    'A': ['B', 'C'],\n",
        "    'B': ['A', 'D', 'E'],\n",
        "    'C': ['A', 'F'],\n",
        "    'D': ['B'],\n",
        "    'E': ['B', 'F'],\n",
        "    'F': ['C', 'E']\n",
        "}\n",
        "\n",
        "# Performing DFS on the graph starting from node 'A'\n",
        "print(\"DFS traversal of the graph:\", dfs_graph(graph, 'A'))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 613
        },
        "id": "OuKcrT3IH_lL",
        "outputId": "25907afb-b5e7-4cbd-86db-a55b53304b6f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[(1000, 0.00014090538024902344, 0.00011157989501953125), (40000, 0.015932083129882812, 0.0032777786254882812), (80000, 0.0006058216094970703, 0.003991127014160156), (200000, 0.7133276462554932, 0.0924532413482666), (1000000, 12.430288791656494, 0.42142605781555176)]\n",
            "   Range Size  BFS Time (s)  DFS Time (s)\n",
            "0        1000      0.000141      0.000112\n",
            "1       40000      0.015932      0.003278\n",
            "2       80000      0.000606      0.003991\n",
            "3      200000      0.713328      0.092453\n",
            "4     1000000     12.430289      0.421426\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import random\n",
        "\n",
        "def generate_random_unique_numbers(start, end, count):\n",
        "    return random.sample(range(start, end), count)\n",
        "\n",
        "ranges = [1000, 40000, 80000, 200000, 1000000]\n",
        "random_sets = [generate_random_unique_numbers(1, range_size, range_size - 220) for range_size in ranges]\n",
        "class TreeNode:\n",
        "    def __init__(self, value):\n",
        "        self.value = value\n",
        "        self.left = None\n",
        "        self.right = None\n",
        "\n",
        "def build_tree_from_list(nums):\n",
        "    if not nums:\n",
        "        return None\n",
        "\n",
        "    root = TreeNode(nums[0])\n",
        "    for num in nums[1:]:\n",
        "        insert_into_tree(root, num)\n",
        "\n",
        "    return root\n",
        "\n",
        "def insert_into_tree(root, value):\n",
        "    if not root:\n",
        "        return TreeNode(value)\n",
        "\n",
        "    if value < root.value:\n",
        "        root.left = insert_into_tree(root.left, value)\n",
        "    elif value > root.value:\n",
        "        root.right = insert_into_tree(root.right, value)\n",
        "\n",
        "    return root\n",
        "\n",
        "trees = [build_tree_from_list(nums) for nums in random_sets]\n",
        "import time\n",
        "\n",
        "def bfs_find_goal(root, goal):\n",
        "    if not root:\n",
        "        return False\n",
        "\n",
        "    queue = [root]\n",
        "    while queue:\n",
        "        node = queue.pop(0)\n",
        "        if node.value == goal:\n",
        "            return True\n",
        "        if node.left:\n",
        "            queue.append(node.left)\n",
        "        if node.right:\n",
        "            queue.append(node.right)\n",
        "\n",
        "    return False\n",
        "\n",
        "def dfs_find_goal(root, goal):\n",
        "    if not root:\n",
        "        return False\n",
        "\n",
        "    stack = [root]\n",
        "    while stack:\n",
        "        node = stack.pop()\n",
        "        if node.value == goal:\n",
        "            return True\n",
        "        if node.right:\n",
        "            stack.append(node.right)\n",
        "        if node.left:\n",
        "            stack.append(node.left)\n",
        "\n",
        "    return False\n",
        "\n",
        "goal_index = -220\n",
        "results = []\n",
        "for tree, range_size in zip(trees, ranges):\n",
        "    start_time = time.time()\n",
        "    bfs_result = bfs_find_goal(tree, tree.value + goal_index)\n",
        "    bfs_time = time.time() - start_time\n",
        "\n",
        "    start_time = time.time()\n",
        "    dfs_result = dfs_find_goal(tree, tree.value + goal_index)\n",
        "    dfs_time = time.time() - start_time\n",
        "\n",
        "    results.append((range_size, bfs_time, dfs_time))\n",
        "\n",
        "print(results)\n",
        "import pandas as pd\n",
        "\n",
        "df = pd.DataFrame(results, columns=['Range Size', 'BFS Time (s)', 'DFS Time (s)'])\n",
        "print(df)\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.bar(df['Range Size'], df['BFS Time (s)'], label='BFS Time')\n",
        "plt.bar(df['Range Size'], df['DFS Time (s)'], label='DFS Time')\n",
        "plt.xlabel('Range Size')\n",
        "plt.ylabel('Time (s)')\n",
        "plt.title('Execution Time for BFS and DFS')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class Node:\n",
        "    def __init__(self, value=None):\n",
        "        self.value = value\n",
        "        self.children = []\n",
        "\n",
        "def alpha_beta(node, alpha, beta, is_maximizing_player):\n",
        "    if not node.children:\n",
        "        return node.value\n",
        "\n",
        "    if is_maximizing_player:\n",
        "        value = float('-inf')\n",
        "        for child in node.children:\n",
        "            value = max(value, alpha_beta(child, alpha, beta, False))\n",
        "            alpha = max(alpha, value)\n",
        "            if alpha >= beta:\n",
        "                break\n",
        "        return value\n",
        "    else:\n",
        "        value = float('inf')\n",
        "        for child in node.children:\n",
        "            value = min(value, alpha_beta(child, alpha, beta, True))\n",
        "            beta = min(beta, value)\n",
        "            if alpha >= beta:\n",
        "                break\n",
        "        return value\n",
        "\n",
        "# Example usage\n",
        "root = Node()\n",
        "root.value = 3\n",
        "\n",
        "node1 = Node(5)\n",
        "node2 = Node(6)\n",
        "node3 = Node(9)\n",
        "\n",
        "node4 = Node(1)\n",
        "node5 = Node(2)\n",
        "node6 = Node(8)\n",
        "\n",
        "root.children = [node1, node2, node3]\n",
        "node1.children = [node4, node5]\n",
        "node2.children = [node6]\n",
        "\n",
        "result = alpha_beta(root, float('-inf'), float('inf'), True)\n",
        "print(\"Result:\", result)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LU23TWd18zN5",
        "outputId": "e2559e06-07e8-40e5-ed3b-7655bba1fbd9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Result: 9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tPaIbAZeIV9a",
        "outputId": "684b086e-f593-4280-d447-c62f2e249dbe"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Path found: [(0, 0), (0, 1), (1, 1), (1, 2), (1, 3), (1, 4), (2, 4), (3, 4), (3, 5)]\n"
          ]
        }
      ],
      "source": [
        "import heapq\n",
        "\n",
        "# Define the maze as a grid\n",
        "maze = [\n",
        "    ['W', ' ', 'W', 'W', ' ', 'W'],\n",
        "    ['W', ' ', ' ', ' ', ' ', 'W'],\n",
        "    ['W', ' ', 'W', 'W', ' ', 'W'],\n",
        "    ['W', ' ', 'W', 'W', ' ', 'Y'],\n",
        "    [' ', ' ', 'A ', ' ', ' ', ' ']\n",
        "]\n",
        "\n",
        "# Define node class to represent each tile in the maze\n",
        "class Node:\n",
        "    def __init__(self, row, col, parent=None):\n",
        "        self.row = row\n",
        "        self.col = col\n",
        "        self.parent = parent\n",
        "        self.g = float('inf')  # Cost from start node to current node\n",
        "        self.h = float('inf')  # Heuristic cost from current node to goal node\n",
        "        self.f = float('inf')  # Total estimated cost (f = g + h)\n",
        "\n",
        "    def __lt__(self, other):\n",
        "        return self.f < other.f\n",
        "\n",
        "# Define heuristic function (Manhattan distance)\n",
        "def heuristic(node, goal):\n",
        "    return abs(node.row - goal.row) + abs(node.col - goal.col)\n",
        "\n",
        "# Implement A* search algorithm\n",
        "def astar_search(maze, start, goal):\n",
        "    rows, cols = len(maze), len(maze[0])\n",
        "    open_set = []\n",
        "    closed_set = set()\n",
        "    start_node = Node(start[0], start[1])\n",
        "    goal_node = Node(goal[0], goal[1])\n",
        "    start_node.g = 0\n",
        "    start_node.h = heuristic(start_node, goal_node)\n",
        "    start_node.f = start_node.g + start_node.h\n",
        "    heapq.heappush(open_set, start_node)\n",
        "\n",
        "    while open_set:\n",
        "        current_node = heapq.heappop(open_set)\n",
        "        closed_set.add((current_node.row, current_node.col))\n",
        "\n",
        "        if current_node.row == goal_node.row and current_node.col == goal_node.col:\n",
        "            path = []\n",
        "            while current_node:\n",
        "                path.append((current_node.row, current_node.col))\n",
        "                current_node = current_node.parent\n",
        "            return path[::-1]\n",
        "\n",
        "        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n",
        "            new_row, new_col = current_node.row + dr, current_node.col + dc\n",
        "            if 0 <= new_row < rows and 0 <= new_col < cols and maze[new_row][new_col] != 'W' and (new_row, new_col) not in closed_set:\n",
        "                neighbor_node = Node(new_row, new_col, parent=current_node)\n",
        "                neighbor_node.g = current_node.g + 1\n",
        "                neighbor_node.h = heuristic(neighbor_node, goal_node)\n",
        "                neighbor_node.f = neighbor_node.g + neighbor_node.h\n",
        "                heapq.heappush(open_set, neighbor_node)\n",
        "\n",
        "    return None  # No path found\n",
        "\n",
        "# Define starting and goal positions\n",
        "start_position = (0, 0)\n",
        "goal_position = (3, 5)\n",
        "\n",
        "# Find the path using A* search\n",
        "result_path = astar_search(maze, start_position, goal_position)\n",
        "\n",
        "if result_path:\n",
        "    print(\"Path found:\", result_path)\n",
        "else:\n",
        "    print(\"No path found.\")\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNfkc/waA3WVCOzKwgTxg0d",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}